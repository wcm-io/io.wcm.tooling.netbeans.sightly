# Tags
sly_documentation=The <sly> HTML tag can be used to remove the current element, \
allowing only its children to be displayed. Its functionality is similar to the data-sly-unwrap block element:
# Attributes
dataSlyUse_documentation=<div style="padding: 2px;">\
    <h2>data-sly-use</h2>\
    <ul>\
        <li>Exposes logic to the template.</li>\
        <li><b>Element</b>: always shown.</li>\
        <li><b>Attribute value</b>: required; evaluates to String; the object to instantiate.</li>\
        <li><b>Attribute identifier</b>: optional; customised identifier name to access the instantiated logic.</li>\
    </ul>\
    <p>Initialises the specified logic and makes it available to the current template:</p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;">\
        &lt;div data-sly-use.page="customPage.js"&gt;${page.foo}&lt;/div&gt; \
    </div>\
    <p>The element on which a <i>data-sly-use</i> has been set as well as its content \
is rendered (simply removing the <i>data-sly-use</i> attribute from the output):</p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;">\
        &lt;div class="foo" data-sly-use.customPage="CustomPage"&gt;Hello World&lt;/div&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;div class="foo"&gt;Hello World&lt;/div&gt;\
    </div>\
    <p>The identifier set by the data-sly-use attribute isn't scoped only inside \
of the element, but can be used anywhere after its declaration:</p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;">\
        ${customPage.foo} &lt;!--/* this fails */--&gt; <br>\
        &lt;div data-sly-use.customPage="CustomPage"&gt;Hello World&lt;/div&gt; <br>\
        ${customPage.foo} &lt;!--/* but this works */--&gt; \
    </div>\
    <p>Parameters can be passed to the Use-API by using expression options:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;">\
        &lt;div data-sly-use.nav="${'Navigation' @ depth=1, showVisible=!wcmmode.edit}"&gt;${nav.foo}&lt;/div&gt; \
    </div>\
    <p>The use statement can also be used to load external templates. See <i>data-sly-template</i></p> \
    <hr>\
    <p>JavaScript Use-API</p> \
    <p>HTL encourages separation of concerns by not allowing business logic to \
mix with markup. However, business logic can be implemented through the Use-API.<p>\
    <p>Example:</p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;">\
        &lt;div data-sly-use.page="page.js"&gt;${page.foo}&lt;/div&gt;\
    </div>\
    <p>with page.js:</p>\
      <div style="background:#ffffff;border: 1px solid black; padding: 4px;">\
        use(['dep1.js', 'dep2.js'], function (Dep1, Dep2) {<br>\
    &nbsp;&nbsp;// implement processing<br>\
    &nbsp;&nbsp;// define this Use object's behaviour<br>\
    &nbsp;&nbsp;return {<br>\
        &nbsp;&nbsp;&nbsp;&nbsp;propertyName: propertyValue, <br>\
    &nbsp;&nbsp;&nbsp;&nbsp;functionName: function () {}, <br>\
    &nbsp;&nbsp;&nbsp;&nbsp;foo: "bar" <br>\
    &nbsp;&nbsp;}<br>\
    });\
    </div>\
    <p>Result:</p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;">\
        &lt;div&gt;bar&lt;/div&gt;\
    </div>\
    <hr/>\
    <br>\
</div> 
dataSlyText_documentation=<div style="padding: 2px;">\
    <h2>data-sly-text</h2>\
    <ul>\
        <li>Sets the content for the current element.</li>\
        <li><b>Element</b>: always shown.</li>\
        <li><b>Content of element</b>: Replaced with evaluated result.</li>\
        <li><b>Attribute value</b>: required; evaluates to <i>String;</i> the element content.</li>\
        <li><b>Attribute identifier</b>: none;</li>\
    </ul>\
    <p>The content of the data-sly-text attribute is automatically XSS-protected with the text context, unless stated otherwise.</p>\
    <p>Example:</p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;">\
        &lt;p <strong>data-sly-text="${'<strong>Bold and Proud</strong>' @ context='html'}"</strong>&gt;This text would never be shown.&lt;/p&gt;\
    </div><br>\
    Result:<br>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;">\
        &lt;p&gt;Bold and Proud&lt;/p&gt;\
    </div>\
</div>
dataSlyAttribute_documentation=<div style="padding: 2px;">\
    <h2>data-sly-attribute</h2>\
    <ul>\
        <li>Sets an attribute or a group of attributes on the current element.</li>\
        <li><b>Element</b>: always shown.</li>\
        <li><b>Content of element</b>: always shown.</li>\
        <li><b>Attribute value</b>: optional; <i>String</i> for setting attribute \
            content, or <i>Boolean</i> for setting boolean attributes, or <i>Object</i> \
            for setting multiple attributes; removes the attribute if the value is omitted.\
        </li>\
        <li><b>Attribute identifier</b>: optional; the attribute name; must be \
        omitted only if attribute value is an <i>Object</i>.</li>\
    </ul>\
    <p>Attributes can be written either simply by writing an expression, or by specifying \
    a <i>data-sly-attribute.*</i> attribute. This allows to annotate a designer's \
    HTML without modifying the mock content:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!--/* This will overwrite the content of the class attribute */--&gt; <br>\
        &lt;tag class="className" data-sly-attribute.class="${myVar}"&gt;&lt;/tag&gt;  <br>\
        <br>\
        &lt;!--/* This will create a data-values attribute */--&gt;  <br>\
        &lt;tag data-sly-attribute.data-values="${myValues}"&gt;&lt;/tag&gt; <br>\
    </div> \
    <p>The data-sly-attribute block element (without specifying an attribute name)\
    allows to inject at once several attributes that have been prepared in a map \
    object that contains key-value pairs:</p>
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!-- assuming that foobar = {'id':'foo', 'class':'bar'} --&gt; <br>\
        &lt;input data-sly-attribute="${foobar}" type="text"/&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;input id="foo" class="bar" type="text"/&gt; <br>\
    </div>\
    <p>The attribute name and content are automatically XSS-protected accordingly, unless stated otherwise:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;input type="number" name="quantity" min="${qttMin @ context='number'}" max="${qttMax @ context='number'}"/&gt; \
    </div>\
    <hr> \
    \
    <p>For all examples below, consider that following object is available in the context:</p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        foobar = {'id': 'foo', 'class': 'bar', 'lang': ''}\
    </div> \
     \
    <p>Attributes are processed left-to-right:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div class="bar1" data-sly-attribute.class="bar2" data-sly-attribute="${foobar}"&gt;&lt;/div&gt;  <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;div id="foo" class="bar"&gt;&lt;/div&gt; <br>\
        <br>\
        &lt;div data-sly-attribute="${foobar}" data-sly-attribute.class="bar2" id="foo2"&gt;&lt;/div&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;div id="foo2" class="bar2"&gt;&lt;/div&gt; <br>\
    </div> \
    \
    <p>Empty string values lead to the removal of the attribute:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div lang="${''}"&gt;&lt;/div&gt; <br>\
        &lt;div lang="en" data-sly-attribute.lang&gt;&lt;/div&gt; <br>\
        &lt;div lang="en" data-sly-attribute.lang=""&gt;&lt;/div&gt; <br>\
        &lt;div lang="en" data-sly-attribute.lang="${''}"&gt;&lt;/div&gt; <br>\
        &lt;!--/* All of the above output: */--&gt; <br>\
        &lt;div&gt;&lt;/div&gt; <br>\
 <br>\
        &lt;div lang="en" data-sly-attribute="${foobar}"&gt;&lt;/div&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;div id="foo" class="bar"&gt;&lt;/div&gt;\
    </div>\
    \
    <p>Still, empty attributes are left as they are if no data-sly-attribute applies to them:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div title="" data-sly-attribute="${foobar}"&gt;&lt;/div&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;div title="" id="foo" class="bar"&gt;&lt;/div&gt; \
    </div> \
     \
    <p>Boolean values allow to control the display of boolean attributes:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;input checked="${true}"/&gt; <br>\
        &lt;input data-sly-attribute.checked="${true}"/&gt; <br>\
        &lt;!--/* Both output: */--&gt; <br>\
        &lt;input checked/&gt; <br>\
        <br>\
        &lt;input checked="${false}"/&gt; <br>\
        &lt;input data-sly-attribute.checked="${false}"/&gt; <br>\
        &lt;!--/* Both output: */--&gt; <br>\
        &lt;input/&gt; <br>\
        <br>\
        &lt;!--/* But 'true' or 'false' strings don't work the same way: */--&gt; <br>\
        &lt;input checked="${'true'}"/&gt;  &lt;!--/* outputs: */--&gt; &lt;input checked="true"/&gt; <br>\
        &lt;input checked="${'false'}"/&gt; &lt;!--/* outputs: */--&gt; &lt;input checked="false"/&gt; <br>\
        <br>\
        &lt;!--/* Consider having attrs={'checked': true} */--&gt; <br>\
        &lt;input data-sly-attribute="${attrs}"/&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;input checked/&gt; \
    </div> \
     \
    <p>Arrays are cast to strings:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div title="${['one', 'two', 'three']}"&gt;&lt;/div&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;div title="one,two,three"&gt;&lt;/div&gt; <br>\
        <br>\
        &lt;!--/* Like empty strings, empty arrays remove the attribute: */--&gt; <br>\
        &lt;div title="${[]}"&gt;&lt;/div&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;div&gt;&lt;/div&gt; <br>\
        <br>\
        &lt;!--/* But an array containing just an empty string doesn't get removed: */--&gt; <br>\
        &lt;div title="${['']}"&gt;&lt;/div&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;div title=""&gt;&lt;/div&gt; \
     </div> \
     \
    <p>Numbers are cast to strings (i.e. zero doesn't remove the attribute):</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div class="${0}"&gt;&lt;/div&gt; <br>\
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;div class="0"&gt;&lt;/div&gt; \
    </div>\
</div> 
dataSlyElement_documentation=<div style="padding: 2px;">\
    <h2>data-sly-element</h2>\
    <ul>\
        <li>Replaces the element's tag name.</li>\
        <li><b>Element</b>: always shown.</li>\
        <li><b>Content of element</b>: always shown.</li>\
        <li><b>Attribute value</b>:  required; <i>String;</i> the element's tag name.</li>\
        <li><b>Attribute identifier</b>: none.</li>\
    </ul>\
    <p>Changes the element, mostly useful for setting element tags like h1..h6, th, td, ol, ul.</p> \
    <p>The attribute name and content are automatically XSS-protected accordingly, unless stated otherwise.</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div data-sly-element="${'h1'}"&gt;foobar&lt;/div&gt; <br> \
        &lt;!--/* outputs: */--&gt; <br>\
        &lt;h1&gt;foobar&lt;/h1&gt; \
    </div> \
    <p>The element name is automatically XSS-protected with the elementName context, which by the way doesn't allow elements like &lt;script&gt;, &lt;style&gt;, &lt;form&gt;, or &lt;input&gt;</p>
</div>
dataSlyTest_documentation=<div style="padding: 2px;">\
    <h2>data-sly-test</h2>\
    <ul>\
        <li>Keeps, or removes the element depending on the attribute value.</li>\
        <li><b>Element</b>: shown if test evaluates to <i>true</i>.</li>\
        <li><b>Content of element</b>: shown if test evaluates to <i>true</i>.</li>\
        <li><b>Attribute value</b>:  optional; evaluated as <i>Boolean</i> (but not type-cased to <i>Boolean</i> when exposed in a variable); evaluates to <i>false</i> if the value is omitted.</li>\
        <li><b>Attribute identifier</b>: optional; identifier name to access the result of the test.</li>\
    </ul>\
    <p>Removes the whole element from the markup if the expression evaluates to <i>false</i>.</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;p data-sly-test="${wcmmode.edit}"&gt;You are in edit mode&lt;/p&gt; <br>\
        &lt;p data-sly-test&gt;This paragraph will never display&lt;/p&gt; <br>\
    </div>\
    <p>The evaluated result of the test statement can be assigned to an identifier to be reused later. This identifier isn't scoped, but can be used anywhere in the markup after it has been set:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;p data-sly-test.editOrDesign="${wcmmode.edit || wcmmode.design}"&gt;show this in edit...&lt;/p&gt; <br>\
        &lt;p data-sly-test="${!editOrDesign and pageProperties.jcr:title}"&gt;show this when disabled...&lt;/p&gt; <br>\
    </div>\
    <p>Note that the identifier contains the value of the condition as it was (not casting it to a <i>Boolean</i> value):</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;p data-sly-test.myVar="${'foo'}"&gt;${myVar}&lt;/p&gt; <br>\
        &lt;!--/* outputs: */--&gt;<br>\
        &lt;p&gt;foo&lt;/p&gt;<br>\
    </div> \
</div>
dataSlyList_documentation=<div style="padding: 2px;">\
    <h2>data-sly-list</h2>\
    <ul>\
        <li>Iterates over the content of each item in the attribute value.</li>\
        <li><b>Element</b>: shown only if the number of items from the attribute value is greater than 0, or if the attribute value is a string or number.</li>\
        <li><b>Content of element</b>: repeated as many times as there are items in the attribute value.</li>\
        <li><b>Attribute value</b>: optional; the item to iterate over; if omitted the content will not be shown. </li>\
        <li><b>Attribute identifier</b>: optional; customised identifier name to access the item within the list element.</li>\
    </ul>\
    <p>Repeats the content of the element for each item of the provided object (which can be an array, or any iterable object).</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!--/* By default the 'item' identifier is defined within the loop. */--&gt; <br>\
        &lt;ul data-sly-list="${currentPage.listChildren}"&gt;<br>\
        &nbsp;&nbsp;&lt;li&gt;${item.title}&lt;/li&gt;<br>\
        &lt;/ul&gt;<br>\
        <br>\
        &lt;!--/* This is how the name of the 'item' identifier can be customised. */--&gt;<br>\
        &lt;ul data-sly-list.childPage="${currentPage.listChildren}"&gt;<br>\
        &nbsp;&nbsp;&lt;li&gt;${childPage.title}&lt;/li&gt;<br>\
        &lt;/ul&gt;<br>\
    </div> \
    <p>An additional <i>itemList</i> (respectively <i>&lt;variable&gt;List</i> in \
    case a custom identifier/variable was defined using <i>data-sly-list.&lt;variable&gt;</i>) \
    identifier is also available within the scope, with the following members:</p> \
    <ul>\
      <li><i>index</i>: zero-based counter (<i>0..length-1</i>);</li> \
      <li><i>count</i>: one-based counter (<i>1..length</i>);</li> \
      <li><i>first</i>: <i>true</i> for the first element being iterated;</li> \
      <li><i>middle</i>: <i>true</i> if element being iterated is neither the first nor the last;</li> \
      <li><i>last</i>: <i>true</i> for the last element being iterated;</li> \
      <li><i>odd</i>: <i>true</i> if index is odd;</li> \
      <li><i>even</i>: <i>true</i> if index is even;</li> \
    </ul> \
    <p>When iterating over Map objects, the item variable contains the key of each map item:</p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;dl data-sly-list="${myMap}"&gt; <br>\
        &nbsp;&nbsp;&lt;dt&gt;key: ${item}&tl;/dt&gt; <br>\
        &nbsp;&nbsp;&lt;dd&gt;value: ${myMap[item]}&tl;/dd&gt; <br>\
        &lt;/dl&gt; <br>\
    </div> \
    <hr> \
    <p>Difference to <b>data-sly-list</b> and data-sly-repeat:<p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div data-sly-list/repeat="${foobar}"&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;${itemList.index} \u2013 ${item.title}&lt;/p&gt; <br>\
        &lt;/div&gt; \
    </div>\
    outputs: <br>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!-- data-sly-<b>list</b> --&gt; <br>\
        &lt;div&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;0 \u2013 foo&lt;/p&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;1 \u2013 bar&lt;/p&gt; <br>\
        &nbsp;&nbsp;\u2026 <br>\
        &lt;/div&gt; <br>\
        <br><br>\
        &lt;!-- data-sly-<b>repeat</b> --&gt; <br>\
        &lt;div&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;0 \u2013 foo&lt;/p&gt; <br>\
        &lt;/div&gt; <br>\
        &lt;div&gt;  <br>\
        &nbsp;&nbsp;&lt;p&gt;1 \u2013 bar&lt;/p&gt; <br>\
        &lt;/div&gt; \
        \u2026 <br>\
    </div> \
</div>
dataSlyRepeat_documentation=<div style="padding: 2px;">\
    <h2>data-sly-repeat</h2>\
    <ul>\
        <li>Iterates over the content of each item in the attribute value and displays the containing element as many times as items in the attribute value.</li>\
        <li><b>Element</b>: shown only if the number of items from the attribute value is greater than 0, or if the attribute value is a string or number.</li>\
        <li><b>Content of element</b>: repeated as many times as there are items in the attribute value.</li>\
        <li><b>Attribute value</b>: optional; the item to iterate over; if omitted the containing element and its content will not be shown.</li>\
        <li><b>Attribute identifier</b>: optional; customised identifier name to access the item within the repeat element.</li>\
    </ul>\
    <p>Repeats the content of the element for each item of the provided object (which can be an array, or any iterable object).</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!--/* By default the 'item' identifier is defined within the loop. */--&gt; <br>\
        &lt;p data-sly-repeat="${resource.listChildren}"&gt;${item.text}&lt;/p&gt; <br>\
        <br>\
        &lt;!--/* This is how the name of the 'item' identifier can be customised. */--&gt; <br>\
        &lt;p data-sly-repeat.childResource="${resource.listChildren}"&gt;${childResource.text}&lt;/p&gt; <br>\
        <br>\
        &lt;!--/* The 'item' identifier can be used on the defining element. */--&gt; <br>\
        &lt;div data-sly-repeat.article="${articlesCollection}" id="${article.id}"&gt;${article.excerpt}&lt;/div&gt; <br>\
    </div> \
    <p>An additional <i>itemList</i> (respectively <i>&lt;variable&gt;List</i> in \
    case a custom identifier/variable was defined using <i>data-sly-repeat.&lt;variable&gt;</i>) \
    identifier is also available within the scope, with the following members:</p> \
    <ul>\
      <li><i>index</i>: zero-based counter (<i>0..length-1</i>);</li> \
      <li><i>count</i>: one-based counter (<i>1..length</i>);</li> \
      <li><i>first</i>: <i>true</i> for the first element being iterated;</li> \
      <li><i>middle</i>: <i>true</i> if element being iterated is neither the first nor the last;</li> \
      <li><i>last</i>: <i>true</i> for the last element being iterated;</li> \
      <li><i>odd</i>: <i>true</i> if index is odd;</li> \
      <li><i>even</i>: <i>true</i> if index is even;</li> \
    </ul> \
    <p>When iterating over Map objects, the item variable contains the key of each map item:</p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;dl data-sly-list="${myMap}"&gt; <br>\
        &nbsp;&nbsp;&lt;dt&gt;key: ${item}&tl;/dt&gt; <br>\
        &nbsp;&nbsp;&lt;dd&gt;value: ${myMap[item]}&tl;/dd&gt; <br>\
        &lt;/dl&gt; <br>\
    </div> \
    <hr> \
    <p>Difference to data-sly-list and <b>data-sly-repeat</b>:<p>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div data-sly-list/repeat="${foobar}"&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;${itemList.index} \u2013 ${item.title}&lt;/p&gt; <br>\
        &lt;/div&gt; \
    </div>\
    outputs: <br>\
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!-- data-sly-<b>list</b> --&gt; <br>\
        &lt;div&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;0 \u2013 foo&lt;/p&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;1 \u2013 bar&lt;/p&gt; <br>\
        &nbsp;&nbsp;\u2026 <br>\
        &lt;/div&gt; <br>\
        <br><br>\
        &lt;!-- data-sly-<b>repeat</b> --&gt; <br>\
        &lt;div&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;0 \u2013 foo&lt;/p&gt; <br>\
        &lt;/div&gt; <br>\
        &lt;div&gt;  <br>\
        &nbsp;&nbsp;&lt;p&gt;1 \u2013 bar&lt;/p&gt; <br>\
        &lt;/div&gt; \
        \u2026 <br>\
    </div> \
</div>
dataSlyInclude_documentation=<div style="padding: 2px;">\
    <h2>data-sly-include</h2>\
    <ul>\
        <li>Includes the output of a rendering script run with the current context.</li>\
        <li><b>Element</b>: always shown.</li>\
        <li><b>Content of element</b>: replaced with the content of the included script.</li>\
        <li><b>Attribute value</b>: required; the file to include.</li>\
        <li><b>Attribute identifier</b>: none</li>\
    </ul>\
    <p>Includes the output of a rendering script run with the current context, passing back control to the current HTL script.</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div data-sly-include="template.html"&gt;&lt;/div&gt; <br>\
        &lt;div data-sly-include="template.jsp"&gt;&lt;/div&gth; <br>\
        <br>\
        &lt;!--/* Following statements are equivalent: */--&gt; <br>\
        &lt;div data-sly-include="template.html"&gt;&lt;/div&gt; <br>\
        &lt;div data-sly-include="${'template.html'}"&gt;&lt;/div&gt; <br>\
    </div>\
    <p>With an expression more options can be specified:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!--/* Manipulating the path: */--&gt; <br>\
        &lt;div data-sly-include="${'template.html' @ appendPath='appended/path'}"&gt;&lt;/div&gt; <br>\
        &lt;div data-sly-include="${'template.html' @ prependPath='prepended/path'}"&gt;&lt;/div&gt; <br>\
        &lt;div data-sly-include="${@ file='template.html', prependPath='prepended/path', appendPath='appended/path'}"&gt;&lt;/div&gt; <br>\
    </div>\
    <p>The element on which a data-sly-include has been set is ignored and not displayed:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
    &lt;!--/* Following will simply output the rendered content of the template, the complete &lt;div&gt; element will be ignored */--&gt;  <br>\
    &lt;div id="test-one" class="test-two" data-sly-include="template.html"&gt;Foo&lt;/div&gt;  <br>\
    &lt;!--/* outputs only the result of template.html */--&gt;  <br>\
    </div> \
    <p>The scope of the data-sly-include statement isn't passed to the template of the included resource.</p>\
</div>
dataSlyResource_documentation=<div style="padding: 2px;">\
    <h2>data-sly-resource</h2>\
    <ul>\
        <li>Includes a rendered resource.</li>\
        <li><b>Element</b>: always shown.</li>\
        <li><b>Content of element</b>: replaced with the content of the resource.</li>\
        <li><b>Attribute value</b>: required; the path to include.</li>\
        <li><b>Attribute identifier</b>: none</li>\
    </ul>\
    <p>Includes a rendered resource from the same server, using an absolute or relative path.</p> \
        <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
            &lt;section data-sly-resource="./path"&gt;&lt;/section&gt; \
    </div>\
    <p>With an expression more options can be specified:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!--/* Following statements are equivalent: */--&gt; <br>\
        &lt;section data-sly-resource="./path"&gt;&lt;/section&gt; <br>\
        &lt;section data-sly-resource="${'./path'}"&gt;&lt;/section&gt; <br>\
        <br>\
        &lt;!--/* Manipulating the path: */--&gt; <br>\
        &lt;section data-sly-resource="${'my/path' @ appendPath='appended/path'}"&gt;&lt;/section&gt; <br>\
        &lt;section data-sly-resource="${'my/path' @ prependPath='prepended/path'}"&gt;&lt;/section&gt; <br>\
        <br>\
        &lt;!--/* Manipulating selectors: */--&gt; <br>\
        &lt;section data-sly-resource="${'my/path' @ selectors='selector1.selector2'}"&gt;&lt;/section&gt; <br>\
        &lt;section data-sly-resource="${'my/path' @ selectors=['selector1', 'selector2']}"&gt;&lt;/section&gt; <br>\
        &lt;section data-sly-resource="${'my/path' @ addSelectors='selector1.selector2'}"&gt;&lt;/section&gt; <br>\
        &lt;section data-sly-resource="${'my/path' @ addSelectors=['selector1', 'selector2']}"&gt;&lt;/section&gt; <br>\
        &lt;section data-sly-resource="${'my/path' @ removeSelectors='selector1.selector2'}"&gt;&lt;/section&gt; <br>\
        &lt;section data-sly-resource="${'my/path' @ removeSelectors=['selector1', 'selector2']}"&gt;&lt;/section&gt; <br>\
        &lt;section data-sly-resource="${'my/path' @ removeSelectors}"&gt;&lt;/section&gt; <br>\
        <br>\
        &lt;!--/* Forcing the type of the rendered resource: */--&gt; <br>\
        &lt;section data-sly-resource="${'./path' @ resourceType='my/resource/type'}"&gt;&lt;/section&gt; <br>\
    </div> \
    <p>The scope of the data-sly-include statement isn't passed to the template of the included resource.</p> \
</div>
dataSlyTemplate_documentation=<div style="padding: 2px;">\
    <h1>Template & Call</h1>\
    <p>Template blocks can be used like function calls: in their declaration \
    they can get parameters, which can then be passed when calling them. They also allow recursion.</p>\
    <h2>data-sly-template</h2>\
    <ul>\
        <li>Declares an HTML block, naming it with an identifier and defining the parameters it can get.</li>\
        <li><b>Element</b>: never shown.</li>\
        <li><b>Content of element</b>: shown upon calling the template with <i>data-sly-call</i>.\
        <li><b>Attribute value</b>: optional; an expression with only options, defining the parameters it can get.</li>\
        <li><b>Attribute identifier</b>: required; the template identifier to declare.</li>\
    </ul>\
    <p><b>Examples:</b></p> \
    <p>Static template that has no parameters:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;template data-sly-template.one&gt;blah&lt;/template&gt; <br>\
        &lt;div data-sly-call="${one}"&gt;&lt;/div&gt; \
    </div>\
    <p>The scope of the <i>data-sly-call</i> statement isn't inherited by the <i>data-sly-template</i> block.\
    To pass variables, they must be passed as parameters:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!--/* Notice the usage hint on the resource parameter. */--&gt; <br>\
        &lt;template data-sly-template.two="${@ title, resource='The resource of the parent node'}"&gt; <br>\
        &nbsp;&nbsp;&lt;h1&gt;${title}&lt;/h1&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;Parent: ${resource.name}&lt;/p&gt; <br>\
        &lt;/template&gt; <br>\
        &lt;div data-sly-call="${two @ title=properties.jcr:title, resource=resource.parent}"&gt;&lt;/div&gt; \
    </div>\
    <p>When templates are located in a separate file, they can be loaded with data-sly-use:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div data-sly-use.lib="templateLib.html" data-sly-call="${lib.one}"&gt;&lt;/div&gt; <br>\
        &lt;div data-sly-call="${lib.two @ title=properties.jcr:title, resource=resource.parent}"&gt;&lt;/div&gt; \
    </div>\
    <p>When some parameters are missing in a template call, that parameter would be initialised to an empty string within the template.</p> \
</div>
dataSlyCall_documentation=<div style="padding: 2px;">\
    <h1>Template & Call</h1>\
    <p>Template blocks can be used like function calls: in their declaration \
    they can get parameters, which can then be passed when calling them. They also allow recursion.</p>\
    <h2>data-sly-call</h2>\
    <ul>\
        <li>Calls a declared HTML block, passing parameters to it.</li>\
        <li><b>Element</b>: always shown.</li>\
        <li><b>Content of element</b>: replaced with the content of the called <i>data-sly-template</i> element.\
        <li><b>Attribute value</b>: optional; an expression defining the template identifier and the parameters to pass.</li>\
        <li><b>Attribute identifier</b>: none.</li>\
    </ul>\
    <p><b>Examples:</b></p> \
    <p>Static template that has no parameters:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;template data-sly-template.one&gt;blah&lt;/template&gt; <br>\
        &lt;div data-sly-call="${one}"&gt;&lt;/div&gt; \
    </div>\
    <p>The scope of the <i>data-sly-call</i> statement isn't inherited by the <i>data-sly-template</i> block.\
    To pass variables, they must be passed as parameters:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!--/* Notice the usage hint on the resource parameter. */--&gt; <br>\
        &lt;template data-sly-template.two="${@ title, resource='The resource of the parent node'}"&gt; <br>\
        &nbsp;&nbsp;&lt;h1&gt;${title}&lt;/h1&gt; <br>\
        &nbsp;&nbsp;&lt;p&gt;Parent: ${resource.name}&lt;/p&gt; <br>\
        &lt;/template&gt; <br>\
        &lt;div data-sly-call="${two @ title=properties.jcr:title, resource=resource.parent}"&gt;&lt;/div&gt; \
    </div>\
    <p>When templates are located in a separate file, they can be loaded with data-sly-use:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;div data-sly-use.lib="templateLib.html" data-sly-call="${lib.one}"&gt;&lt;/div&gt; <br>\
        &lt;div data-sly-call="${lib.two @ title=properties.jcr:title, resource=resource.parent}"&gt;&lt;/div&gt; \
    </div>\
    <p>When some parameters are missing in a template call, that parameter would be initialised to an empty string within the template.</p> \
</div>
dataSlyUnwrap_documentation=<div style="padding: 2px;">\
    <h2>data-sly-unwrap</h2>\
    <ul>\
        <li>Unwraps the element.</li>\
        <li><b>Element</b>: never shown.</li>\
        <li><b>Content of element</b>: always shown.\
        <li><b>Attribute value</b>: none.</li>\
        <li><b>Attribute identifier</b>: none.</li>\
    </ul>\
    <p>data-sly-unwrap can be used to hide the element itself, only showing its content:</p> \
    <div style="background:#ffffff;border: 1px solid black; padding: 4px;"> \
        &lt;!--/* This will only show "Foo" (without a &lt;div&gt; around) if the test is true: */--&gt; <br>\
        &lt;div data-sly-test="${myTest}" data-sly-unwrap&gt;Foo&lt;/div&gt; <br>\
        <br>\
        &lt;!--/* This would show a &lt;div&gt; around "Foo" only if the test is false: */--&gt; <br>\
        &lt;div data-sly-unwrap="${myTest}"&gt;Foo&lt;/div&gt; \
    </div>\
</div>